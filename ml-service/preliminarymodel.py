# -*- coding: utf-8 -*-
"""CHD10yrs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bsCsThzrfRJkX5eqXdPWRNxmId4BGfJK
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

df=pd.read_csv('framingham.csv')
X=df.iloc[:,[0,1,2,3,4,5,6,7,8,10,11,12,13,14]].values
y=df.iloc[:,-1].values
print(X)
print(y)

from sklearn.impute import SimpleImputer
imputer=SimpleImputer(missing_values=np.nan, strategy='mean')
imputer.fit(X)
X=imputer.transform(X)
print(X)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=1)

print(X_train)
print(X_test)
print(y_train)
print(y_test)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)
print(X_train)
print(X_test)

# from sklearn.linear_model import LogisticRegression
# logreg = LogisticRegression()
# logreg.fit(X_train, y_train)
# y_pred = logreg.predict(X_test)

# # Evaluation and accuracy
# from sklearn.metrics import accuracy_score
# print('Accuracy of the model is =',
#       accuracy_score(y_test, y_pred))

# from sklearn.svm import SVC
# model = SVC(kernel='linear')
# model.fit(X_train, y_train)
# y_pred = model.predict(X_test)
# accuracy = accuracy_score(y_test, y_pred)
# print(f'Accuracy: {accuracy * 100:.2f}%')

from sklearn.ensemble import RandomForestClassifier
# L=[]
# for i in range(1,300):
classifier=RandomForestClassifier(n_estimators=84,criterion='entropy',random_state=0)
classifier.fit(X_train,y_train)
y_pred=classifier.predict(X_test)
from sklearn.metrics import confusion_matrix,accuracy_score
cm=confusion_matrix(y_test,y_pred)
accuracy_score(y_test,y_pred)
  # print(cm,"\ni:",i,"\n",accuracy_score(y_test,y_pred))
  # L+=[accuracy_score(y_test,y_pred)]
# print(max(L),L.index(max(L))+1)

L=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
L=sc.transform(L)
print(L)
print(classifier.predict(L))